name: 'Helm Publish'
description: |
  Publish a Helm chart to a registry.

  Make sure that the workflow using this action has access to the Chart registry by setting up appropriate secrets.
  By default a chart is published to the GitHub container registry. For authentication, the default `GITHUB_TOKEN` is used which has sufficient permissions.

  This action supports overriding the chart version and appVersion during packaging.

author: EIDP

inputs:
  repo-host:
    description: 'URL of target registry. In case or an OCI registry, the host must start with "oci://".'
    required: true
    default: ghcr.io/${{ github.repository }}
  repo-user:
    description: 'Username for the registry.'
    required: false
    default: 'github'
  repo-password:
    description: 'Password for the registry.'
    required: false
    default: ${{ github.token }}
  chart-path:
    description: 'Path to the chart dir.'
    required: false
    default: './charts'
  chart-output-path:
    description: 'Path to the chart dir.'
    required: false
    default: '${{ github.workspace }}/chart.tgz'
  version:
    description: 'Override the Helm chart version.'
    required: false
    default: ''
  app-version:
    description: 'Override the Helm chart appVersion.'
    required: false
    default: ''
  args:
    description: 'Additional arguments for helm push.'
    required: false
    default: ''
outputs:
  version:
    description: 'The version of the published chart.'
    value: ${{ steps.extract-chart-info.outputs.chart-version }}
  digest:
    description: 'The digest of the published chart in the target registry.'
    value: ${{ steps.publish-chart.outputs.digest }}

runs:
  using: 'composite'
  steps:
    - name: Install Helm
      uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4.3.1

    - name: Extract chart information
      id: extract-chart-info
      shell: bash
      run: |
        CHART_NAME=$(helm show chart "${{ inputs.chart-path }}" | grep '^name:' | cut -d' ' -f2)
        CHART_VERSION=$(helm show chart "${{ inputs.chart-path }}" | grep '^version:' | cut -d' ' -f2)

        # Use override version if provided
        if [ -n "${{ inputs.version }}" ]; then
            CHART_VERSION="${{ inputs.version }}"
        fi

        echo "chart-name=$CHART_NAME" >> $GITHUB_OUTPUT
        echo "chart-version=$CHART_VERSION" >> $GITHUB_OUTPUT
        echo "Chart name: $CHART_NAME"
        echo "Chart version: $CHART_VERSION"

    - name: Package Helm chart
      shell: bash
      run: |
        echo "::group::Packaging Helm chart"
        echo "Packaging Helm chart from path: ${{ inputs.chart-path }}"

        VERSION_ARG=""
        if [ -n "${{ inputs.version }}" ]; then
            VERSION_ARG="--version ${{ inputs.version }}"
        fi

        APP_VERSION_ARG=""
        if [ -n "${{ inputs.app-version }}" ]; then
            APP_VERSION_ARG="--app-version ${{ inputs.app-version }}"
        fi

        helm package --dependency-update "${{ inputs.chart-path }}" $VERSION_ARG $APP_VERSION_ARG 

        CHART_FILE=$(ls -t *.tgz | head -n1)
        echo "âœ… Packaged chart file: $CHART_FILE"
        mv "$CHART_FILE" "${{ inputs.chart-output-path }}"
        echo "ðŸ“¦ Chart moved to: ${{ inputs.chart-output-path }}"
        echo "::endgroup::"

    - name: Login to registry
      shell: bash
      if: ${{ inputs.repo-user != '' && inputs.repo-password != '' }}
      run: |
        echo '${{ inputs.repo-password }}' | helm registry login -u '${{ inputs.repo-user }}' --password-stdin '${{ inputs.repo-host }}'

    - name: Publish Helm chart to registry
      id: publish-chart
      shell: bash
      run: |
        # Publish the chart and capture output
        PUSH_OUTPUT=$(helm push '${{ inputs.chart-output-path }}' '${{ inputs.repo-host }}' "${{ inputs.args }}" 2>&1)
        echo "$PUSH_OUTPUT"
        
        # Extract digest from helm push output
        DIGEST=$(echo "$PUSH_OUTPUT" | grep -o 'sha256:[a-f0-9]\{64\}' | head -n1 || echo "")

        echo "digest=$DIGEST" >> $GITHUB_OUTPUT

    - name: Generate GitHub Summary
      if: success()
      shell: bash
      run: |
        CHART_NAME="${{ steps.extract-chart-info.outputs.chart-name }}"
        CHART_VERSION="${{ steps.extract-chart-info.outputs.chart-version }}"
        CHART_PATH="${{ inputs.chart-path }}"
        REPO_HOST="${{ inputs.repo-host }}"
        DIGEST="${{ steps.publish-chart.outputs.digest }}"

        # Create repository link to the chart
        CHART_URL="https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}/${CHART_PATH}"

        # Generate GitHub summary
        cat >> $GITHUB_STEP_SUMMARY << EOF
        ## ðŸš€ Helm chart published successfully

        **Chart details:**
        - **Name:** \`${CHART_NAME}\`
        - **Version:** \`${CHART_VERSION}\`
        $(if [ -n "$DIGEST" ]; then echo "- **Digest:** \`${DIGEST}\`"; fi)
        - **Source Path:** \`${CHART_PATH}\`
        - **Published to:** \`${REPO_HOST}\`

        **Publication status:** âœ… Successfully published
        EOF
